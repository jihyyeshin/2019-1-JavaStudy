00. equals와 ==.
==는 객체의 주소값으로 비교하기 때문에, 다른 주소값이면 다르다고 판정해버린다.
그렇지만 equals는 객체가 저장하고 있는 데이터가 동일한지를 판정해야한다.
기본적으로 equals도 주소값이 같은지를 판정하지만, equals 메소드가 사용될 때는 재정의해서 데이터를 비교하도록 해야 한다.
대표적인 예가 String인데, String클래스에서는 equals를 재정의하여 데이터를 비교하도록 정의해두었다.

01. 이렇게 객체의 동등 비교를 위해서 equals를 재정의할 때는, hashcode()도 재정의 해야한다. 

hashcode는 기본적으로 객체의 메모리 번지를 이용하여 헤시코드를 만들어 리턴한다.
hashcode또한 String에서 재정의되었는데, 문자열은 데이터가 같을 때 같은 객체로 취급하는 것이 당연하기 때문에, 데이터가 같으면 주소값도 같도록, 결론적으로 같은 객체로 판정되도록 재정의 되어있다.

이러한 hashcode는 HashSet, HashMap, Hashtable등에서 자주 사용되는데, 이 때 또한 hashCode()가 재정의 되어야 한다.
hashtable은 주소가 같을 때에 데이터 또한 비교하여 동일한 객체인지 판단해야 하기 때문에, 먼저 hashcode를 비교한 후에 equals를 이용하여 데이터가 동일한지 까지 판단을 하게 된다. 여기서 equals만 재정의하고 hashcode를 재정의하지 않는다면, key가 무엇으로 사용되느냐에 따라 잘못된 결과가 나올 수도 있다.

예를 들어 key를 1, 2, 3 ...으로 사용하는데, hashCode()를 재정의하지 않는다면 메모리 주소를 통한 결과를 리턴하므로, 잘못된 결과를 만들 것이다.